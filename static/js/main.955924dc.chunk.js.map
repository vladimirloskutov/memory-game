{"version":3,"sources":["utils/constants.js","actions/index.js","components/StartButton.jsx","components/Timer.jsx","components/ControlPanel.jsx","components/Card.jsx","components/CardsBoard.jsx","components/GameResultsTable.jsx","components/App.jsx","reducers/game.js","utils/icons.js","utils/helpers.js","reducers/icons.js","reducers/index.js","index.js"],"names":["GAME_INITIAL","GAME_STARTED","GAME_FINISHED","CARD_OPENED","CARD_CLOSED","CARD_DELETED","closeCard","comparisonIcons","type","payload","connect","gameStatus","game","dispatch","className","onClick","gameTimerId","setInterval","startGame","Error","gameTimer","ControlPanel","icons","shuffledIcons","remainingIcons","props","card","cardId","status","value","id","e","currentCardId","target","length","push","openCard","closeCardTimerId","setTimeout","clearTimeout","firstCardId","secondCardId","firstCardValue","secondCardValue","newRemainingIcons","deleteCard","clearInterval","cardsBoard","map","icon","index","gameResults","tableRows","result","App","initialState","state","action","ICONS","getShuffledIcons","JSON","parse","stringify","sort","Math","random","initialShuffledIcons","forEach","newShuffledIcons","combineReducers","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.955924dc.chunk.js","sourcesContent":["const GAME_INITIAL = 'GAME_INITIAL';\nconst GAME_STARTED = 'GAME_STARTED';\nconst GAME_FINISHED = 'GAME_FINISHED';\n\nconst CARD_OPENED = 'CARD_OPENED';\nconst CARD_CLOSED = 'CARD_CLOSED';\nconst CARD_DELETED = 'CARD_DELETED';\n\nexport {\n  GAME_INITIAL,\n  GAME_STARTED,\n  GAME_FINISHED,\n  CARD_OPENED,\n  CARD_CLOSED,\n  CARD_DELETED,\n};\n","import {\n  GAME_STARTED,\n  GAME_FINISHED,\n  CARD_OPENED,\n  CARD_DELETED,\n} from '../utils/constants';\n\nconst openCard = (cardId) => ({\n  type: CARD_OPENED,\n  payload: {\n    cardId,\n  },\n});\n\nconst closeCard = (comparisonIcons) => ({\n  type: 'CARD_CLOSED',\n  payload: {\n    comparisonIcons,\n  },\n});\n\nconst deleteCard = (comparisonIcons, newRemainingIcons) => ({\n  type: CARD_DELETED,\n  payload: {\n    comparisonIcons,\n    newRemainingIcons,\n  },\n});\n\nconst startGame = (gameTimerId) => ({\n  type: GAME_STARTED,\n  payload: {\n    gameTimerId,\n  },\n});\n\nconst finishGame = () => ({\n  type: GAME_FINISHED,\n});\n\nexport {\n  openCard,\n  closeCard,\n  deleteCard,\n  startGame,\n  finishGame,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { startGame } from '../actions';\nimport {\n  GAME_INITIAL,\n  GAME_STARTED,\n} from '../utils/constants';\n\nconst mapStateToProps = ({ game }) => {\n  const { gameStatus } = game;\n  return { gameStatus };\n};\n\nconst StartButton = ({ dispatch, gameStatus }) => {\n  const handleStartButtonClick = () => {\n    switch (gameStatus) {\n      case GAME_INITIAL: {\n        const gameTimerId = setInterval(() => {\n          dispatch(startGame(gameTimerId));\n        }, 1000);\n        break;\n      }\n      case GAME_STARTED: {\n        break;\n      }\n      default: {\n        throw new Error(`Unknown game status: ${gameStatus}`);\n      }\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-primary btn-lg\"\n      onClick={handleStartButtonClick}\n    >\n      START\n    </button>\n  );\n};\n\nexport default connect(mapStateToProps)(StartButton);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = ({ game }) => {\n  const { gameTimer } = game;\n  return { gameTimer };\n};\n\nconst Timer = ({ gameTimer }) => (<div className=\"d-inline h2\">Time: {gameTimer} s</div>);\n\nexport default connect(mapStateToProps)(Timer);\n","import React from 'react';\nimport StartButton from './StartButton';\nimport Timer from './Timer';\n\nconst ControlPanel = () => (\n  <div className=\"row col-12 mb-5\">\n    <div className=\"col-12 mr-5\">\n      <StartButton />\n    </div>\n    <div className=\"col-12 mt-5\">\n      <Timer />\n    </div>\n  </div>\n);\n\nexport default ControlPanel;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  closeCard,\n  deleteCard,\n  finishGame,\n  openCard,\n} from '../actions';\nimport {\n  GAME_STARTED,\n  CARD_OPENED,\n  CARD_CLOSED,\n  CARD_DELETED,\n} from '../utils/constants';\n\nconst mapStateToProps = ({ game, icons }) => {\n  const {\n    gameStatus,\n    gameTimerId,\n  } = game;\n\n  const {\n    shuffledIcons,\n    remainingIcons,\n    comparisonIcons,\n  } = icons;\n\n  return {\n    gameStatus,\n    gameTimerId,\n    shuffledIcons,\n    remainingIcons,\n    comparisonIcons,\n  };\n};\n\nconst Card = (props) => {\n  const {\n    dispatch,\n    cardId,\n    gameStatus,\n    gameTimerId,\n    shuffledIcons,\n    remainingIcons,\n    comparisonIcons,\n  } = props;\n\n  const handleCardClick = (e) => {\n    const currentCardId = e.target.id;\n\n    if (gameStatus !== GAME_STARTED) {\n      return;\n    }\n\n    if (comparisonIcons.length < 2) {\n      comparisonIcons.push(currentCardId);\n      dispatch(openCard(currentCardId));\n    }\n\n    const closeCardTimerId = setTimeout(() => {\n      if (comparisonIcons.length === 1) {\n        dispatch(closeCard(comparisonIcons));\n      }\n    }, 5000);\n\n    if (comparisonIcons.length === 2) {\n      clearTimeout(closeCardTimerId);\n\n      const [firstCardId, secondCardId] = comparisonIcons;\n      const firstCardValue = shuffledIcons[firstCardId].value;\n      const secondCardValue = shuffledIcons[secondCardId].value;\n\n      setTimeout(() => {\n        if (firstCardValue === secondCardValue) {\n          const newRemainingIcons = remainingIcons - 2;\n\n          dispatch(deleteCard(comparisonIcons, newRemainingIcons));\n\n          if (newRemainingIcons === 0) {\n            clearInterval(gameTimerId);\n            dispatch(finishGame());\n          }\n        } else {\n          dispatch(closeCard(comparisonIcons));\n        }\n      }, 2000);\n    }\n  };\n\n  const { status, value } = shuffledIcons[cardId];\n  let card;\n\n  switch (status) {\n    case CARD_CLOSED:\n      card = (\n        <div className=\"col-2 mb-4\">\n          <div className=\"card bg-warning\">\n            <div id={cardId} className=\"card-body\" onClick={handleCardClick}>\n              <span className=\"invisible\">{value}</span>\n            </div>\n          </div>\n        </div>\n      );\n      break;\n    case CARD_OPENED:\n      card = (\n        <div className=\"col-2 mb-4\">\n          <div className=\"card\">\n            <div className=\"card-body text-center font-weight-bold\">{value}</div>\n          </div>\n        </div>\n      );\n      break;\n    case CARD_DELETED:\n      card = (\n        <div className=\"col-2\" />\n      );\n      break;\n    default:\n      throw new Error(`Unknown card status: ${status}`);\n  }\n\n  return card;\n};\n\nexport default connect(mapStateToProps)(Card);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Card from './Card';\n\nconst mapStateToProps = ({ icons }) => {\n  const { shuffledIcons } = icons;\n  return { shuffledIcons };\n};\n\nconst CardsBoard = ({ shuffledIcons }) => {\n  const cardsBoard = shuffledIcons.map((icon, index) => <Card key={index} cardId={index} />);\n\n  return (\n    <div className=\"row mb-5\">\n      {cardsBoard}\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(CardsBoard);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = ({ game }) => {\n  const { gameResults } = game;\n  return { gameResults };\n};\n\nconst GameResultsTable = ({ gameResults }) => {\n  const tableRows = gameResults.map((result, index) => (\n    <tr key={index}>\n      <td>{index + 1}</td>\n      <td>\n        {result}\n        s\n      </td>\n    </tr>\n  ));\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>Round time</th>\n        </tr>\n      </thead>\n      <tbody>\n        {tableRows}\n      </tbody>\n    </table>\n  );\n};\n\nexport default connect(mapStateToProps)(GameResultsTable);\n","import React from 'react';\nimport ControlPanel from './ControlPanel';\nimport CardsBoard from './CardsBoard';\nimport GameResultsTable from './GameResultsTable';\n\nconst App = () => (\n  <div className=\"container\">\n    <div className=\"row mt-5\">\n      <div className=\"col-3\">\n        <ControlPanel />\n        <GameResultsTable />\n      </div>\n      <div className=\"col-9\">\n        <CardsBoard />\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","import {\n  GAME_INITIAL,\n  GAME_STARTED,\n  GAME_FINISHED,\n} from '../utils/constants';\n\nconst initialState = {\n  gameStatus: 'GAME_INITIAL',\n  gameTimer: 0,\n  gameTimerId: null,\n  gameResults: [],\n};\n\nconst game = (state = initialState, action) => {\n  switch (action.type) {\n    case GAME_STARTED: {\n      return {\n        ...state,\n        gameStatus: GAME_STARTED,\n        gameTimer: state.gameTimer + 1,\n        gameTimerId: action.payload.gameTimerId,\n      };\n    }\n    case GAME_FINISHED: {\n      const gameResults = [...state.gameResults];\n      gameResults.push(state.gameTimer);\n\n      return {\n        gameStatus: GAME_INITIAL,\n        gameTimer: 0,\n        gameTimerId: null,\n        gameResults,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default game;\n","import { CARD_CLOSED } from './constants';\n\nconst ICONS = [\n  { value: '1', status: CARD_CLOSED }, { value: '2', status: CARD_CLOSED }, { value: '3', status: CARD_CLOSED }, { value: '4', status: CARD_CLOSED },\n  { value: '5', status: CARD_CLOSED }, { value: '6', status: CARD_CLOSED }, { value: '7', status: CARD_CLOSED }, { value: '8', status: CARD_CLOSED },\n  { value: '9', status: CARD_CLOSED }, { value: '1', status: CARD_CLOSED }, { value: '2', status: CARD_CLOSED }, { value: '3', status: CARD_CLOSED },\n  { value: '4', status: CARD_CLOSED }, { value: '5', status: CARD_CLOSED }, { value: '6', status: CARD_CLOSED }, { value: '7', status: CARD_CLOSED },\n  { value: '8', status: CARD_CLOSED }, { value: '9', status: CARD_CLOSED }, { value: '!', status: CARD_CLOSED }, { value: '@', status: CARD_CLOSED },\n  { value: '#', status: CARD_CLOSED }, { value: '$', status: CARD_CLOSED }, { value: '%', status: CARD_CLOSED }, { value: '^', status: CARD_CLOSED },\n  { value: '&', status: CARD_CLOSED }, { value: '*', status: CARD_CLOSED }, { value: '-', status: CARD_CLOSED }, { value: '!', status: CARD_CLOSED },\n  { value: '@', status: CARD_CLOSED }, { value: '#', status: CARD_CLOSED }, { value: '$', status: CARD_CLOSED }, { value: '%', status: CARD_CLOSED },\n  { value: '^', status: CARD_CLOSED }, { value: '&', status: CARD_CLOSED }, { value: '*', status: CARD_CLOSED }, { value: '-', status: CARD_CLOSED },\n];\n\nexport default ICONS;\n","import ICONS from './icons';\n\nconst getShuffledIcons = () => {\n  const newIcons = JSON.parse(JSON.stringify(ICONS));\n  return newIcons.sort(() => Math.random() - 0.5);\n};\n\nexport default getShuffledIcons;\n","import getShuffledIcons from '../utils/helpers';\nimport {\n  GAME_FINISHED,\n  CARD_OPENED,\n  CARD_CLOSED,\n  CARD_DELETED,\n} from '../utils/constants';\n\nconst initialShuffledIcons = getShuffledIcons();\nconst initialState = {\n  shuffledIcons: initialShuffledIcons,\n  remainingIcons: initialShuffledIcons.length,\n  comparisonIcons: [],\n};\n\nconst icons = (state = initialState, action) => {\n  const shuffledIcons = [...state.shuffledIcons];\n\n  switch (action.type) {\n    case CARD_OPENED: {\n      const { cardId } = action.payload;\n      shuffledIcons[cardId].status = CARD_OPENED;\n\n      return {\n        ...state,\n        shuffledIcons,\n      };\n    }\n    case CARD_CLOSED: {\n      const { comparisonIcons } = action.payload;\n      comparisonIcons.forEach((cardId) => {\n        shuffledIcons[cardId].status = CARD_CLOSED;\n      });\n\n      return {\n        ...state,\n        shuffledIcons,\n        comparisonIcons: [],\n      };\n    }\n    case CARD_DELETED: {\n      const { comparisonIcons, newRemainingIcons } = action.payload;\n      comparisonIcons.forEach((cardId) => {\n        shuffledIcons[cardId].status = CARD_DELETED;\n      });\n\n      return {\n        ...state,\n        shuffledIcons,\n        remainingIcons: newRemainingIcons,\n        comparisonIcons: [],\n      };\n    }\n    case GAME_FINISHED: {\n      const newShuffledIcons = getShuffledIcons();\n\n      return {\n        shuffledIcons: newShuffledIcons,\n        remainingIcons: newShuffledIcons.length,\n        comparisonIcons: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default icons;\n","import { combineReducers } from 'redux';\nimport game from './game';\nimport icons from './icons';\n\nexport default combineReducers({\n  game,\n  icons,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}